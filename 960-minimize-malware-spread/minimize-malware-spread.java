class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        int minNodesInfected = Integer.MAX_VALUE;
        int resultNode = -1;

        for (int removedNode : initial) {
            Set<Integer> infected = new HashSet<>();
            for (int init : initial) {
                if (init != removedNode) {
                    infected.add(init);
                }
            }

            Set<Integer> visited = new HashSet<>();
            for (int node : initial) {
                if (node != removedNode && !visited.contains(node)) {
                    dfs(graph, node, infected, visited);
                }
            }

            if (infected.size() < minNodesInfected || (infected.size() == minNodesInfected && removedNode < resultNode)) {
                minNodesInfected = infected.size();
                resultNode = removedNode;
            }
        }

        return resultNode;
    }

    private void dfs(int[][] graph, int node, Set<Integer> infected, Set<Integer> visited) {
        visited.add(node);
        infected.add(node);
        for (int neighbor = 0; neighbor < graph[node].length; neighbor++) {
            if (graph[node][neighbor] == 1 && !visited.contains(neighbor) && !infected.contains(neighbor)) {
                dfs(graph, neighbor, infected, visited);
            }
        }
    }
}